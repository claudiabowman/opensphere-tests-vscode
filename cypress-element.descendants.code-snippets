{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  
	"Command: Click - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dcli",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .click();$0"
    ],
    "description": "Click on element - descendant"
  },
	"Command: Right click - descendant": {
		"scope": "javascript,typescript",
		"prefix": "drcli",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .rightclick();$0"
    ],
    "description": "Right click on element - descendant"
  },
	"Command: Check - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dche",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .check();$0"
    ],
    "description": "Check checkbox - descendant"
  },
	"Command: Uncheck - descendant": {
		"scope": "javascript,typescript",
		"prefix": "duche",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .uncheck();$0"
    ],
    "description": "Check checkbox - descendant"
  },
	"Command: Type text - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dtyp",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .type('${3:<Enter text here>}');$0"
    ],
    "description": "Enter text into element - descendant"
  },
	"Command: Clear - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dcle",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .clear();$0"
    ],
    "description": "Clear element text - descendant"
  },
	"Command: Invoke function - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dinv",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .invoke('${2:<Enter function name here>}');$0"
    ],
    "description": "Invoke a function on an element - descendant"
  },
  "Command: Log text to Cypress - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dlog",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .then(function($element) {",
      "      cy.log($element.text());",
      "    });$0",
    ],
    "description": "Write element text to the log - descendant"
  },
  "Command: Log value to Cypress - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dlog",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .then(function($element) {",
      "      cy.log($element.val());",
      "    });$0",
    ],
    "description": "Write element value to the log - descendant"
  },
	"Assert: Visible - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dvis",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .should('be.visible');$0"
    ],
    "description": "Assert that element is visible - descendant"
  },
	"Assert: NOT visible - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dnvis",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .should('not.be.visible');$0"
    ],
    "description": "Assert that element is NOT visible - descendant"
  },
	"Assert: Does NOT exist - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dnexi",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .should('not.exist');$0"
    ],
    "description": "Assert that element does NOT exist - descendant"
  },
	"Assert: Contains text (partial) - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dcon",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .should('contain', '${3:<Enter text here>}');$0"
    ],
    "description": "Assert that element contains text (exact) - descendant"
  },
	"Assert: Does NOT contain text (partial) - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dncon",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .should('not.contain', '${3:<Enter text here>}');$0"
    ],
    "description": "Assert that element does NOT contain text (exact) - descendant"
  },
	"Assert: Contains text (regex) - descendant": {
		"scope": "javascript,typescript",
		"prefix": "drcon",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .invoke('text')",
      "    .should('match', new RegExp(/${3:'<Enter regular expression here>'}/));$0"
    ],
  "description": "Assert that element contains text (regex) - descendant"
  },
	"Assert: Does NOT contain text (regex) - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dnrcon",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .invoke('text')",
      "    .should('not.match', new RegExp(${3:'<Enter regular expression here>'}));$0"
    ],
  "description": "Assert that element does NOT contain text (regex) - descendant"
  },
	"Assert: Has value (exact) - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dval",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .should('have.value', '${3:<Enter text here>}');$0"
    ],
    "description": "Assert that element has value (exact) - descendant"
  },
	"Assert: Does NOT have value (exact) - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dnval",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .should('not.have.value', '${3:<Enter text here>}');$0"
    ],
    "description": "Assert that element does NOT have value (exact) - descendant"
  },
	"Assert: Has value (regex) - descendant": {
		"scope": "javascript,typescript",
		"prefix": "drval",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .invoke('val')",
      "    .should('match', new RegExp(/${3:'<Enter regular expression here>'}/));$0"
    ],
  "description": "Assert that element has value (regex) - descendant"
  },
	"Assert: Does NOT have value (regex) - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dnrval",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .invoke('val')",
      "    .should('not.match', new RegExp(/${3:'<Enter regular expression here>'}/));$0"
    ],
  "description": "Assert that element does not have value (regex) - descendant"
  },
	"Assert: Text changed (after action) - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dtcha",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .then(function($${3:enterNameOfElementHere}) {",
			"      const INITIAL_${4:ENTER_NAME_OF_ELEMENT_HERE} = $${3:enterNameOfElementHere}.text();",
			"      ${5:// <Do something here to change the element text>}",
      "      cy.get(${1:'<Enter a parent element selector here>'})",
      "          .find(${2:'<Enter a child element selector here>'})",
      "          .should('not.contain', INITIAL_${4:ENTER_NAME_OF_ELEMENT_HERE});",
			"    });$0"
    ],
  "description": "Assert that element text changes after action - descendant"
  },
	"Assert: Value changed (after action) - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dvcha",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .then(function($${3:enterNameOfElementHere}) {",
			"      const INITIAL_${4:ENTER_NAME_OF_ELEMENT_HERE} = $${3:enterNameOfElementHere}.val();",
			"      ${5:// <Do something here to change the element value>}",
      "      cy.get(${1:'<Enter a parent element selector here>'})",
      "          .find(${2:'<Enter a child element selector here>'})",
      "          .should('not.contain', INITIAL_${4:ENTER_NAME_OF_ELEMENT_HERE})",
			"   });$0"
    ],
  "description": "Assert that element text changes after action - descendant"
  },
	"Assert: Empty - descendant": {
		"scope": "javascript,typescript",
		"prefix": "demp",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .should('be.empty');$0"
    ],
    "description": "Assert that element is empty - descendant"
  },
	"Assert: Has class - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dcla",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .should('have.class', ${3:'<Enter class here>'});$0"
    ],
    "description": "Assert that element has class - descendant"
  },
  "Assert: Does NOT have class - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dncla",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .should('not.have.class', ${3:'<Enter class here>'});$0"
    ],
    "description": "Assert that element does NOT have class - descendant"
  },
	"Assert: Has attribute - descendant": {
		"scope": "javascript,typescript",
		"prefix": "datt",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .should('have.attr', '${3:<Enter attribute name here>}', '${4:<Enter attribute value here>}');$0"
    ],
    "description": "Assert that elment has attribute - descendant"
  },
	"Assert: Does NOT have attribute - descendant": {
		"scope": "javascript,typescript",
		"prefix": "dnatt",
		"body": [
      "cy.get(${1:'<Enter a parent element selector here>'})",
      "    .find(${2:'<Enter a child element selector here>'})",
      "    .should('not.have.attr', '${3:<Enter attribute name here>}', '${4:<Enter attribute value here>}');$0"
    ],
    "description": "Assert that element does NOT have attribute - descendant"
  }
}